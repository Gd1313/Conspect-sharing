@model Conspect_sharing.Models.ViewModels.ArticleReadViewModel
@inject SignInManager<ApplicationUser> SignInManager

<head>
    <link rel="stylesheet" href="~/css/stars.css">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.4.1/css/all.css" integrity="sha384-5sAR7xN1Nv6T6+dT2mhtzEpVJvfS3NScPQTrOxhwjIuvcA67KV2R5Jz6kr4abQsz" crossorigin="anonymous">
</head>

<div class="container">
    <div class="readArticle">
        <div id="name">
            <h1><b> @Localizer["Description"]</b></h1>
            <h2 class="article-name">@Html.DisplayFor(model => model.Name)</h2>
        </div>
        <div id="speciality">
            <h1><b>@Localizer["Speciality"]</b></h1>
            <h2 class="article-speciality">@Html.DisplayFor(model => model.Specialty) </h2>
        </div>

        <div id="dates">
            <div id="username" style="margin-left:75%">
                @Localizer["UserName"]
                <span class="article-info"> @Html.DisplayFor(model => model.UserName)</span>
            </div>
            <div id="createdDate" style="margin-left:75%">
                @Localizer["CreationDate"]
                <span class="article-info">@Html.DisplayFor(model => model.CreatedDate)</span>
            </div>
            <div id="modifiedDate" style="margin-left:75%; margin-bottom:10px;">
                @Localizer["LastModifeDate"]
                <span class="article-info">@Html.DisplayFor(model => model.LastModifeDate)</span>
            </div>
            @if (SignInManager.IsSignedIn(User))
            {
                <div id="rate" style="margin-left:75%; margin-bottom:10px;">
                    @Localizer["Rate"]
                    <span class="article-info">@Html.DisplayFor(model => model.Rate)</span>
                </div>
            }
            @if (SignInManager.IsSignedIn(User))
            {
                <div id="rate" style="margin-left:75%; margin-bottom:10px;">
                    @Localizer["YourRate"]
                    <span class="article-info" id="userMark">@Html.DisplayFor(model => model.YourMark)</span>
                </div>
            }
        </div>




        <div id="exportContent" class="pre-scrolable ">
            @Html.Raw(Model.Text)
        </div>
        @if (SignInManager.IsSignedIn(User))
        {
            <div class='rating-stars text-center'>
                <ul id='stars' onclick="SetRate('@Model.Id')">
                    <li class='star' title='1' data-value='1'>
                        <i class='fa fa-star fa-fw'></i>
                    </li>
                    <li class='star' title='2' data-value='2'>
                        <i class='fa fa-star fa-fw'></i>
                    </li>
                    <li class='star' title='3' data-value='3'>
                        <i class='fa fa-star fa-fw'></i>
                    </li>
                    <li class='star' title='4' data-value='4'>
                        <i class='fa fa-star fa-fw'></i>
                    </li>
                    <li class='star' title='5' data-value='5'>
                        <i class='fa fa-star fa-fw'></i>
                    </li>
                </ul>
            </div>

        }
   </div>

    <div id="tags">
        @if (Model.Tags != null)
        {
            @Localizer["Tags"]
            <p>
                @foreach (var teg in Model.Tags)
                {
                    <a class="tag label label-primary"
                       href='@Url.Action("SearchByHashtag","ArticleManage",new { hashtag=teg })'>@teg</a>
                    @*<a class="tag label label-primary" asp-controller="ArticleManage" asp-route-hashtag="teg" asp-action="SearchByHashtag">
                            @teg
                        </a>*@
                }
            </p>
        }
    </div>

    <div>
        <label> @Localizer["Download"]</label>
        <br />
        <button type="button" style="margin-top:12px;" class="btn btn-default btn-sm"
                onclick="Export2Doc('exportContent','@Model.UserName');">
            <span class="glyphicon glyphicon-download-alt"></span>
        </button>
    </div>



</div>

<H3> @Localizer["Comments"]</H3>
<section class="container">
    <div class="row">
        <div class="col-md-12">
        
            <div class="panel comment-input">
                @if (SignInManager.IsSignedIn(User))
                {
                    <div class="panel-body">
                        <textarea class="form-control" rows="2" id="commentFiled"
                                  placeholder="@Localizer["AddYourComment"]"></textarea>
                        <div class="mar-top clearfix">
                            <button id="submitComment" onclick="ProcessComment('@Model.Id')"
                                    style="margin-top:20px;" class="btn btn-sm btn-primary pull-right" type="button">
                                <i class="fa fa-pencil fa-fw"></i> @Localizer["AddComment"]
                            </button>
                        </div>
                    </div>}
            </div>
         
                <div class="panel comment-list">
                    <div class="panel-body" id="Comments_@Model.Id">
                        @foreach (var i in Model.Comments)
                        {
                            <div class="media-block">
                                <div class="media-body">
                                    <div class="mar-btm">
                                        <span class=" text-semibold media-heading box-inline comment-Name">@i.Name</span>
                                        <span class="text-muted text-sm"> - @i.Date</span>
                                    </div>
                                    <br />
                                    <p name="comment">  @i.Comment</p>
                                    <div class="pad-ver">
                                        <span class="tag-sm">
                                            <i class="glyphicon glyphicon-fire " style="color:#ffa500;"></i>
                                            <span id="likes_@i.Id">@i.Likes</span>
                                        </span>
                                        <div class="btn-group" style="float:right;display:block;">
                                            @if (SignInManager.IsSignedIn(User))
                                            {
                                                <button class="btn btn-sm btn-default btn-hover-success active"
                                                        id="like" onclick="ProcessLike('@i.Id')">
                                                    <i class="glyphicon glyphicon-heart-empty" style="color:#27aeb9;"></i>
                                                </button>
                                            }
                                            </div>
                                    </div>
                                    <hr>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
    </div>
</section>
</div>

@section Scripts{
    <script>
        function Export2Doc(element, filename = '') {
            var preHtml = "<html xmlns:o='urn:schemas-microsoft-com:office:office' xmlns:w='urn:schemas-microsoft-com:office:word' xmlns='http://www.w3.org/TR/REC-html40'><head><meta charset='utf-8'><title>Export HTML To Doc</title></head><body>";
            var postHtml = "</body></html>";
            var html = preHtml + document.getElementById(element).innerHTML + postHtml;

            var blob = new Blob(['\ufeff', html], {
                type: 'application/msword'
            });

            // Specify link url
            var url = 'data:application/vnd.ms-word;charset=utf-8,' + encodeURIComponent(html);

            // Specify file name
            filename = filename ? filename + '.doc' : 'document.doc';

            // Create download link element
            var downloadLink = document.createElement("a");

            document.body.appendChild(downloadLink);

            if (navigator.msSaveOrOpenBlob) {
                navigator.msSaveOrOpenBlob(blob, filename);
            }
            else {
                // Create a link to the file
                downloadLink.href = url;

                // Setting the file name
                downloadLink.download = filename;

                //triggering the function
                downloadLink.click();
            }

            document.body.removeChild(downloadLink);
        }

        var hubUrl = '/chat';
        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl(hubUrl)
            .configureLogging(signalR.LogLevel.Information)
            .build();

        hubConnection.on('SendComment', function (data) {
            let HTMLstring =
                `<div><div class="media-block" >
                <div class="media-body">
                    <div class="mar-btm">
                        <span class=" text-semibold media-heading box-inline comment-Name">  ${data.name}</span>
                        <span class="text-muted text-sm"><i class="fa  fa-lg"></i> - ${data.date}</span>
                    </div>
                    <br />
                    <p name="comment">  </p>
                    <div class="pad-ver">
                        <span class=" tag-sm"><i class="glyphicon glyphicon-fire " style="color:#ffa500;" ></i>
                        <span id="likes_${data.id}">${data.likes}</span> </span>
                        <div class="btn-group" style="float:right;" >
                            <button class="btn btn-sm btn-default btn-hover-success active" id="like" onclick="ProcessLike('${data.id}')">
                                <i class="glyphicon glyphicon-heart-empty" style="color:#27aeb9;" ></i>
                            </button>
                        </div>
                    </div>
                    <hr>
                </div>
           </div> </div>`;
            $("#Comments_" + data.articleId).prepend(HTMLstring);
            document.getElementsByName('comment')[0].innerText = data.comment;
        });

        hubConnection.start();

        function ProcessComment(id) {
            var text = $('#commentFiled').val();
            if (text != null && text != "") {
                $('#commentFiled').val("");
                sendRequest("/ArticleManage/SetComment", { articleId: id, text: text });
            }
        }

        function sendRequest(url, data, callback) {
            $.ajax({
                type: 'POST',
                url: url,
                data: data,
                success: function (data) {
                    if (callback != null) {
                        callback(data);
                    }
                }
            });
        }

        function ProcessLike(id) {
            sendRequest("/ArticleManage/SetLikeToComment", { id: id }, function (data) {
                if (data.success) {
                    $('#likes_' + data.id).text(`${data.likes}`)
                }
            });
        }
        function SetRate(id) {
            $(document).ready(function () {

                /* 1. Visualizing things on Hover - See next part for action on click */
                $('#stars li').on('mouseover', function () {
                    var onStar = parseInt($(this).data('value'), 10); // The star currently mouse on

                    // Now highlight all the stars that's not after the current hovered star
                    $(this).parent().children('li.star').each(function (e) {
                        if (e < onStar) {
                            $(this).addClass('hover');
                        }
                        else {
                            $(this).removeClass('hover');
                        }
                    });

                }).on('mouseout', function () {
                    $(this).parent().children('li.star').each(function (e) {
                        $(this).removeClass('hover');
                    });
                });


                /* 2. Action to perform on click */
                $('#stars li').on('click', function () {
                    var onStar = parseInt($(this).data('value'), 10); // The star currently selected
                    var stars = $(this).parent().children('li.star');

                    for (i = 0; i < stars.length; i++) {
                        $(stars[i]).removeClass('selected');
                    }

                    for (i = 0; i < onStar; i++) {
                        $(stars[i]).addClass('selected');
                    }

                    var ratingValue = parseInt($('#stars li.selected').last().data('value'), 10);

                    sendRequest("/ArticleManage/SetRate", { articleId: id, rate: ratingValue });

                    var mark = document.getElementById("userMark");
                    mark.innerHTML = ratingValue;

                });
            });
        }

    </script>
}
